package com.example.com.venom;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.web.context.WebServerInitializedEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.stereotype.Component;
import java.io.File;

@SpringBootApplication
@EntityScan("com.example.com.venom.entity")
@EnableJpaRepositories("com.example.com.venom.repository")
public class VenomApplication {

    public static void main(String[] args) {
        SpringApplication.run(VenomApplication.class, args);
    }

    // ‚≠ê –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ö–ª–∞—Å—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ venom.mode=global
    @Component
    @ConditionalOnProperty(name = "venom.mode", havingValue = "global")
    public static class ServerInfoPrinter implements ApplicationListener<WebServerInitializedEvent> {
        
        @Override
        public void onApplicationEvent(WebServerInitializedEvent event) {
            try {
                // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º
                System.out.println("\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –ì–õ–û–ë–ê–õ–¨–ù–û–ú —Ä–µ–∂–∏–º–µ!");
                System.out.println("–í—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ngrok...");

                // üëâ –í—ã–∑–æ–≤ Python-—Å–∫—Ä–∏–ø—Ç–∞
                runPythonScript();
                
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: " + e.getMessage());
            }
        }

        private void runPythonScript() {
            try {
                // –ü—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Å–∫—Ä–∏–ø—Ç—É (–µ—Å–ª–∏ –æ–Ω –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å jar)
                ProcessBuilder pb = new ProcessBuilder("python", "update_ngrok_gist.py");

                // üëâ –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
                // –û–°–¢–û–†–û–ñ–ù–û: –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ IDE. –î–ª—è jar-—Ñ–∞–π–ª–∞ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –ø—É—Ç—å.
                pb.directory(new File("src/main/resources/scripts")); 

                // –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
                pb.inheritIO();

                // –ó–∞–ø—É—Å–∫
                Process process = pb.start();
                int exitCode = process.waitFor();

                if (exitCode == 0) {
                    System.out.println("‚úÖ Python-—Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. (–ì–õ–û–ë–ê–õ–¨–ù–´–ô —Ä–µ–∂–∏–º)");
                } else {
                    System.err.println("‚ùå Python-—Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ö–æ–¥: " + exitCode);
                }

            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Python-—Å–∫—Ä–∏–ø—Ç–∞: " + e.getMessage());
            }
        }
    }
}