package com.example.com.venom;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.context.WebServerInitializedEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import java.io.File;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;

@SpringBootApplication
public class VenomApplication {

    public static void main(String[] args) {
        SpringApplication.run(VenomApplication.class, args);
    }

    

    @Component
public static class ServerInfoPrinter implements ApplicationListener<WebServerInitializedEvent> {
    @Override
    public void onApplicationEvent(WebServerInitializedEvent event) {
        try {
            int port = event.getWebServer().getPort();
            String ip = getLocalNetworkIp();

            System.out.println("\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!");
            System.out.println("–í—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞...");

            // üëâ –í—ã–∑–æ–≤ Python-—Å–∫—Ä–∏–ø—Ç–∞
            runPythonScript();

            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: " + e.getMessage());
        }
    }

    private void runPythonScript() {
        try {
            // –ü—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Å–∫—Ä–∏–ø—Ç—É (–µ—Å–ª–∏ –æ–Ω –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å jar)
            ProcessBuilder pb = new ProcessBuilder("python", "update_ngrok_gist.py");

            // üëâ –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
            pb.directory(new File("src/main/resources/scripts")); // –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å

            // –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            pb.inheritIO();

            // –ó–∞–ø—É—Å–∫
            Process process = pb.start();
            int exitCode = process.waitFor();

            if (exitCode == 0) {
                System.out.println("‚úÖ Python-—Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
            } else {
                System.err.println("‚ùå Python-—Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ö–æ–¥: " + exitCode);
            }

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Python-—Å–∫—Ä–∏–ø—Ç–∞: " + e.getMessage());
        }
    }

    private String getLocalNetworkIp() throws Exception {
        Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
        while (interfaces.hasMoreElements()) {
            NetworkInterface iface = interfaces.nextElement();
            if (iface.isLoopback() || !iface.isUp()) continue;

            Enumeration<InetAddress> addresses = iface.getInetAddresses();
            while (addresses.hasMoreElements()) {
                InetAddress addr = addresses.nextElement();
                if (addr instanceof Inet4Address) {
                    return addr.getHostAddress();
                }
            }
        }
        return "127.0.0.1";
    }
}

}