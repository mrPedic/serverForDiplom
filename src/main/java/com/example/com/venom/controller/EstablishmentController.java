package com.example.com.venom.controller;

import java.util.List;
import java.util.Optional; 
import java.util.stream.Collectors; // –î–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.com.venom.dto.EstablishmentCreationRequest;
import com.example.com.venom.dto.EstablishmentDisplayDto; 
import com.example.com.venom.entity.EstablishmentEntity;
import com.example.com.venom.entity.EstablishmentStatus;
import com.example.com.venom.repository.EstablishmentRepository;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/establishments")
@RequiredArgsConstructor
public class EstablishmentController {

    private final EstablishmentRepository establishmentRepository;

    // ‚≠ê –ù–û–í–ê–Ø –ö–û–ù–ï–ß–ù–ê–Ø –¢–û–ß–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–û–ë–ù–û–í–õ–ï–ù–û)
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<EstablishmentDisplayDto>> findByUserId(@PathVariable Long userId) {
        List<EstablishmentEntity> userEstablishments = establishmentRepository.findByCreatedUserId(userId);
        
        // –ú–ê–ü–ü–ò–ù–ì: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º List<Entity> –≤ List<DisplayDto>
        List<EstablishmentDisplayDto> dtoList = userEstablishments.stream()
            .map(EstablishmentDisplayDto::fromEntity)
            .collect(Collectors.toList());
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–µ—Ç)
        return ResponseEntity.ok(dtoList);
    }

    // ========================== –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π (–û–ë–ù–û–í–õ–ï–ù–û) ==========================
    @GetMapping("/getAll")
    public ResponseEntity<List<EstablishmentDisplayDto>> getAll() {
        List<EstablishmentEntity> allEntities = establishmentRepository.findAll();
        
        // –ú–ê–ü–ü–ò–ù–ì: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º List<Entity> –≤ List<DisplayDto>
        List<EstablishmentDisplayDto> dtoList = allEntities.stream()
            .map(EstablishmentDisplayDto::fromEntity)
            .collect(Collectors.toList());
        
        return ResponseEntity.ok(dtoList);
    }

    // ========================== –ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π ==========================
    @GetMapping("/search")
    public ResponseEntity<List<EstablishmentDisplayDto>> searchEstablishments(@RequestParam String query) {
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ò–õ–ò –∞–¥—Ä–µ—Å—É
        List<EstablishmentEntity> foundEntities = 
            establishmentRepository.findByNameContainingIgnoreCaseOrAddressContainingIgnoreCase(query, query);
            
        // –ú–ê–ü–ü–ò–ù–ì
        List<EstablishmentDisplayDto> dtoList = foundEntities.stream()
            .map(EstablishmentDisplayDto::fromEntity)
            .collect(Collectors.toList());
            
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        return ResponseEntity.ok(dtoList);
    }

    // ========================== –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ ID (–û–ë–ù–û–í–õ–ï–ù–û) ==========================
    @GetMapping("/{id}")
    public ResponseEntity<?> findById(@PathVariable Long id) {
        return establishmentRepository.findById(id)
            // –ú–ê–ü–ü–ò–ù–ì: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Optional<Entity> –≤ Optional<DisplayDto> –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
            .<ResponseEntity<?>>map(entity -> ResponseEntity.ok(EstablishmentDisplayDto.fromEntity(entity)))
            .orElse(ResponseEntity.badRequest().body("–ó–∞–≤–µ–¥–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
    }

    @PostMapping("/create")
    public ResponseEntity<?> register(@RequestBody EstablishmentCreationRequest request) {
        String name = request.getName();
        String address = request.getAddress();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        Optional<EstablishmentEntity> existing = establishmentRepository.findByNameAndAddress(name, address);
        if (existing.isPresent()) {
            return ResponseEntity.badRequest().body("–ó–∞–≤–µ–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞–¥—Ä–µ—Å–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
    
        // –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ DTO
        EstablishmentEntity newEstablishmentEntity = new EstablishmentEntity(
            request.getName(),
            request.getLatitude(),
            request.getLongitude(),
            request.getAddress(),
            request.getDescription(),
            request.getCreatedUserId(),
            request.getType(),
            request.getPhotoBase64s() // ‚≠ê –ü–ï–†–ï–î–ê–ï–ú –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –§–û–¢–û
        );
    
        EstablishmentEntity savedEntity = establishmentRepository.save(newEstablishmentEntity);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É Display DTO
        return ResponseEntity.ok(EstablishmentDisplayDto.fromEntity(savedEntity));
    }


    // ========================== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–û–ë–ù–û–í–õ–ï–ù–û) ==========================
    @PutMapping("/{id}")
    public ResponseEntity<?> updateById(@PathVariable Long id, @RequestBody EstablishmentEntity establishmentEntity) {
        return establishmentRepository.findById(id)
            .<ResponseEntity<?>>map(existing -> {
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –º–µ–Ω—è—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                establishmentEntity.setId(id);
                establishmentEntity.setDateOfCreation(existing.getDateOfCreation());
                establishmentEntity.setCreatedUserId(existing.getCreatedUserId());

                // ‚≠ê –ï—Å–ª–∏ –≤—Ö–æ–¥—è—â–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç —Ñ–æ—Ç–æ, –º—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –ø–æ—Å—ã–ª–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ. 
                // –ù–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —à–ª–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è, –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.
                
                // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –¥–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—à–µ–¥—à—É—é —Å—É—â–Ω–æ—Å—Ç—å.
                // –ï—Å–ª–∏ photoBase64s = null/"" –≤ –∑–∞–ø—Ä–æ—Å–µ, –æ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ null.
                
                EstablishmentEntity updatedEntity = establishmentRepository.save(establishmentEntity);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Display DTO
                return ResponseEntity.ok(EstablishmentDisplayDto.fromEntity(updatedEntity));
            })
            .orElse(ResponseEntity.badRequest().body("–ó–∞–≤–µ–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
    }

    // ========================== –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–û—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==========================
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteById(@PathVariable Long id) {
        return establishmentRepository.findById(id)
            .map(existing -> {
                establishmentRepository.delete(existing);
                return ResponseEntity.ok("–ó–∞–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ");
            })
            .orElse(ResponseEntity.badRequest().body("–ó–∞–≤–µ–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
    }

    // ========================== ‚≠ê –ù–û–í–ê–Ø –ö–û–ù–ï–ß–ù–ê–Ø –¢–û–ß–ö–ê: –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è ==========================
    // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç ID –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ).
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PUT, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å.
    @PutMapping("/{id}/status")
        public ResponseEntity<?> updateEstablishmentStatus(
            @PathVariable Long id, 
            @RequestParam String status // <-- –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø –Ω–∞ String
        ) {
    Optional<EstablishmentEntity> optionalEntity = establishmentRepository.findById(id);

    if (optionalEntity.isEmpty()) {
        return ResponseEntity.badRequest().body("–ó–∞–≤–µ–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }

    EstablishmentEntity existing = optionalEntity.get();
    
    // --- ‚≠ê –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–†–£–ß–ù–£–Æ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –°–¢–†–û–ö–£ –í ENUM ---
    EstablishmentStatus newStatus;
    try {
    newStatus = EstablishmentStatus.valueOf(status.toUpperCase()); 
} catch (IllegalArgumentException e) {
    // üî• –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —ç—Ç–æ—Ç –±–ª–æ–∫, —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω–µ—Ç 400
    return ResponseEntity.badRequest().body("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: " + status);
}
    // -----------------------------------------------------------
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    existing.setStatus(newStatus); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π ENUM
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    EstablishmentEntity updatedEntity = establishmentRepository.save(existing);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Display DTO
    return ResponseEntity.ok(EstablishmentDisplayDto.fromEntity(updatedEntity));
}
    
    // ========================== ‚≠ê –ù–û–í–ê–Ø –ö–û–ù–ï–ß–ù–ê–Ø –¢–û–ß–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö (PENDING) ==========================
    @GetMapping("/pending")
    public ResponseEntity<List<EstablishmentDisplayDto>> getPendingEstablishments() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        List<EstablishmentEntity> pendingEntities = 
            establishmentRepository.findByStatus(EstablishmentStatus.PENDING_APPROVAL);

        List<EstablishmentDisplayDto> dtoList = pendingEntities.stream()
            .map(EstablishmentDisplayDto::fromEntity)
            .collect(Collectors.toList());

        return ResponseEntity.ok(dtoList);
    }
}